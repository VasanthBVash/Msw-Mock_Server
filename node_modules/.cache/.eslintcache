[{"D:\\git\\Git master\\React-hook-form\\src\\index.tsx":"1","D:\\git\\Git master\\React-hook-form\\src\\reportWebVitals.ts":"2","D:\\git\\Git master\\React-hook-form\\src\\App.tsx":"3","D:\\git\\Git master\\React-hook-form\\src\\Components\\ReactHookForm.tsx":"4","D:\\git\\Git master\\React-hook-form\\src\\Services\\useHookForm.ts":"5"},{"size":554,"mtime":1697469402364,"results":"6","hashOfConfig":"7"},{"size":425,"mtime":1697469402134,"results":"8","hashOfConfig":"7"},{"size":385,"mtime":1698311843032,"results":"9","hashOfConfig":"7"},{"size":2851,"mtime":1698161098543,"results":"10","hashOfConfig":"7"},{"size":1117,"mtime":1698161070261,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},"8q6jf4",{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\git\\Git master\\React-hook-form\\src\\index.tsx",[],[],["29"],"D:\\git\\Git master\\React-hook-form\\src\\reportWebVitals.ts",[],[],"D:\\git\\Git master\\React-hook-form\\src\\App.tsx",["30","31"],[],"D:\\git\\Git master\\React-hook-form\\src\\Components\\ReactHookForm.tsx",["32","33","34"],[],"import { FormControl, FormLabel } from \"@chakra-ui/form-control\";\r\nimport { Box, Button, FormErrorMessage, Input } from \"@chakra-ui/react\";\r\nimport { zodResolver } from \"@hookform/resolvers/zod\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { z } from \"zod\";\r\nimport { useHookForm ,IProps} from '../Services/useHookForm';\r\nimport { idText } from \"typescript\";\r\n\r\nconst schema = z.object({\r\n  userName: z.string()\r\n    .min(4, { message: \"Minimum 4 character required\" })\r\n    .max(20, { message: \"Maximum 20 character\" }),\r\n  email: z.string()\r\n    .email({ message: \"Invalid email\" }),\r\n  password: z.string()\r\n    .min(8, { message: \"minimum 8 character \" })\r\n    .max(20, { message: \"Maximum 20 character\" }),\r\n})\r\n\r\nfunction ReactHookForm({id} : {id:string | undefined}) {\r\n  const {\r\n    register,\r\n    formState: { isSubmitting, errors },\r\n  } = useForm<IProps>({\r\n    resolver: zodResolver(schema),\r\n  });\r\n\r\n  const {user,add,update,remove} = useHookForm({id});\r\n\r\n  const handleFormSubmit = (data:any) => {\r\n    add.mutate(data);\r\n    update.mutate(data);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h2>User Form</h2>\r\n      <Box onSubmit={handleFormSubmit}>\r\n        <FormControl id=\"userName\" isRequired isInvalid={!!errors.userName}>\r\n          <FormLabel>UserName</FormLabel>\r\n          <Input placeholder=\"Enter Name\" {...register(\"userName\")} />\r\n          <FormErrorMessage>\r\n            {errors.userName && errors.userName.message}\r\n          </FormErrorMessage>\r\n        </FormControl>\r\n        <FormControl id=\"email\" isRequired isInvalid={!!errors.email}>\r\n          <FormLabel htmlFor=\"Enter name\">Email </FormLabel>\r\n          <Input\r\n            type=\"email\"\r\n            placeholder=\"Enter Email\"\r\n            {...register(\"email\")}\r\n          />\r\n          <FormErrorMessage>\r\n            {errors.email && errors.email.message}\r\n          </FormErrorMessage>\r\n        </FormControl>\r\n        <FormControl id=\"phoneNumber\" isRequired>\r\n          <FormLabel htmlFor=\"name\">PhoneNumber</FormLabel>\r\n          <Input\r\n            type=\"number\"\r\n            placeholder=\"Enter PhoneNumber\"\r\n            {...register(\"phoneNumber\")}\r\n          />\r\n        </FormControl>\r\n        <FormControl id=\"passoword\" isRequired isInvalid={!!errors.password}>\r\n          <FormLabel htmlFor=\"name\">Password</FormLabel>\r\n          <Input\r\n            type=\"password\"\r\n            placeholder=\"Enter Password\"\r\n            {...register(\"password\")}\r\n          />\r\n          <FormErrorMessage>\r\n            {errors.password && errors.password.message}\r\n          </FormErrorMessage>\r\n        </FormControl>\r\n        <Button mt={4} colorScheme=\"teal\" isLoading={isSubmitting} type=\"submit\">\r\n          Submit\r\n        </Button>\r\n      </Box>\r\n      <h4>On Submitting you get alert message</h4>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ReactHookForm;\r\n\r\n","D:\\git\\Git master\\React-hook-form\\src\\Services\\useHookForm.ts",[],[],{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":4,"column":10,"nodeType":"39","messageId":"40","endLine":4,"endColumn":26},{"ruleId":"41","severity":1,"message":"42","line":8,"column":34,"nodeType":"43","messageId":"44","endLine":8,"endColumn":49,"fix":"45"},{"ruleId":"37","severity":1,"message":"46","line":7,"column":10,"nodeType":"39","messageId":"40","endLine":7,"endColumn":16},{"ruleId":"37","severity":1,"message":"47","line":28,"column":10,"nodeType":"39","messageId":"40","endLine":28,"endColumn":14},{"ruleId":"37","severity":1,"message":"48","line":28,"column":26,"nodeType":"39","messageId":"40","endLine":28,"endColumn":32},"no-new-object",["49"],"@typescript-eslint/no-unused-vars","'hookFormHandlers' is defined but never used.","Identifier","unusedVar","new-parens","Missing '()' invoking a constructor.","NewExpression","missing",{"range":"50","text":"51"},"'idText' is defined but never used.","'user' is assigned a value but never used.","'remove' is assigned a value but never used.","no-object-constructor",[302,302],"()"]